import unittest
from maze import searchMaze

# 0 is a val
mazes = [
    [
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0]
    ],
    [
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 2, 0, 0],
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0]
    ],
    [
        [0, 0, 0, 0, 0, 0],
        [0, 9, 0, 0, 0, 0],
        [0, 9, 0, 2, 0, 0],
        [0, 9, 0, 0, 0, 0],
        [0, 9, 0, 0, 0, 0],
        [0, 9, 0, 0, 0, 0]
    ],
    [
        [0, 9, 0, 0, 0, 0],
        [0, 9, 0, 9, 9, 0],
        [0, 9, 0, 2, 9, 0],
        [0, 9, 9, 9, 9, 0],
        [0, 9, 0, 0, 0, 0],
        [0, 0, 0, 9, 0, 0]
    ],
    [
        [0, 9, 0, 0, 0, 0],
        [0, 9, 0, 9, 9, 0],
        [0, 0, 0, 2, 9, 0],
        [0, 9, 9, 9, 9, 0],
        [0, 9, 0, 0, 0, 0],
        [0, 0, 0, 9, 0, 0]
    ],
]

results = [
    None,
    ([(2, 2), (2, 1), (2, 0), (1, 0), (0, 0)], 5),
    ([(2, 2), (1, 2), (0, 2), (0, 1), (0, 0)], 5),
    ([(2, 2), (1, 2), (0, 2), (0, 3), (0, 4), (0, 5), (1, 5), (2, 5), (3, 5), (4, 5), (4, 4),      (4, 3), (4, 2), (5, 2), (5, 1), (5, 0), (4, 0), (3, 0), (2, 0), (1, 0), (0, 0)], 21),
    ([(2, 2), (2, 1), (2, 0), (1, 0), (0, 0)], 5)
]


class ShortestPathTestCase(unittest.TestCase):
  # Test for shortest paths
    def test(self):
      for index, maze in enumerate(mazes):
          pathAndDistance = searchMaze(maze, (0, 0))
          self.assertEqual(pathAndDistance, results[index])

if __name__ == '__main__':
    unittest.main()